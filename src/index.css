@tailwind base;
@tailwind components;
@tailwind utilities;
/* src/index.css */

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom Scrollbar Styles */

/* For Webkit browsers (Chrome, Safari, Edge) */
.custom-scrollbar::-webkit-scrollbar {
  width: 10px; /* Width of the scrollbar */
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: #f0f9ff; /* light-blue-50 - Color of the tracking area */
  border-radius: 8px; /* Slightly rounded track */
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background-color: #06b6d4; /* cyan-500 - Color of the scroll thumb */
  border-radius: 8px; /* Roundness of the scroll thumb */
  border: 2px solid #f0f9ff; /* light-blue-50 - Padding around thumb, matching track color */
  background-clip: content-box; /* Ensures border doesn't get colored */
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background-color: #0891b2; /* cyan-600 - Color on hover */
}

/* Dark mode adjustments for Webkit scrollbar */
.dark .custom-scrollbar::-webkit-scrollbar-track {
  background: #1f2937; /* gray-800 */
}

.dark .custom-scrollbar::-webkit-scrollbar-thumb {
  background-color: #22d3ee; /* cyan-400 */
  border: 2px solid #1f2937; /* gray-800 */
}

.dark .custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background-color: #67e8f9; /* cyan-300 */
}


/* For Firefox */
.custom-scrollbar {
  scrollbar-width: thin; /* "auto" or "thin" */
  scrollbar-color: #06b6d4 #f0f9ff; /* thumb color and track color (cyan-500 light-blue-50) */
}

/* Dark mode adjustments for Firefox scrollbar */
.dark .custom-scrollbar {
  scrollbar-color: #22d3ee #1f2937; /* thumb color and track color (cyan-400 gray-800) */
}
// src/components/LoadingSpinner.jsx
import React from 'react';
import { motion } from 'framer-motion'; // Import motion
import cubeImage from '../assets/loading-cube.webp';
import spikesImage from '../assets/loading-spikes.png';

export default function LoadingSpinner({ text = 'Loading...' }) {
  const jumpAnimation = {
    x: [-80, 0, 80, 160, 240], // Horizontal movement
    y: [0, 0, -80, 0, 0],       // Vertical movement (the jump)
    rotate: [0, 0, 90, 90, 90],
    opacity: [0, 1, 1, 1, 0],
  };

  const jumpTransition = {
    duration: 1.5,
    ease: "easeInOut",
    repeat: Infinity, // Loop forever
    repeatType: "loop",
    times: [0, 0.2, 0.5, 0.8, 1], // Timing for each keyframe
  };

  return (
    <div className="flex flex-col items-center justify-center h-screen bg-gray-900 text-white">
      {/* Animation Stage */}
      <div className="relative w-64 h-32">
        {/* The Cube */}
        <motion.img
          src={cubeImage}
          alt="Loading..."
          className="absolute bottom-0 left-0 w-12 h-12" // Initial position is now controlled by the animation
          animate={jumpAnimation}
          transition={jumpTransition}
        />
        {/* The Spikes */}
        <img
          src={spikesImage}
          alt=""
          className="absolute bottom-0 left-1/2 -translate-x-1/2 h-8"
        />
      </div>

      {text && <p className="mt-4 text-xl font-semibold text-gray-400">{text}</p>}
    </div>
  );
}