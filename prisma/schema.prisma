// prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  // This line is essential for Vercel deployments
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

type Record {
  username String
  percent  Int
  videoId  String
}

model Level {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  placement   Int
  name        String
  creator     String
  verifier    String?
  levelId     Int?
  videoId     String
  description String?
  list        String
  records     Record[]
  @@map("levels")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DemonDifficulty {
  EASY
  MEDIUM
  HARD
  INSANE
  EXTREME
}

// Enum for the progress tracking feature
enum RecordStatus {
  IN_PROGRESS
  COMPLETED
}

// Enum for the friends system feature
enum FriendStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

model User {
  id                     String           @id @default(auto()) @map("_id") @db.ObjectId
  email                  String           @unique
  username               String           @unique
  password               String
  role                   Role             @default(USER)
  createdAt              DateTime         @default(now())
  submissions            Submission[]
  personalRecords        PersonalRecord[]

  // Fields for the friends & profile system
  pinnedRecordId         String?          @db.ObjectId
  friendshipsAsRequester Friendship[]     @relation("Requester")
  friendshipsAsReceiver  Friendship[]     @relation("Receiver")
}

model Submission {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  levelName     String
  player        String
  percent       Int
  videoId       String
  rawFootageLink String
  notes         String?
  status        SubmissionStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  submittedBy   User             @relation(fields: [submittedById], references: [id])
  submittedById String           @db.ObjectId
}

model PersonalRecord {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  placement      Int
  levelName      String
  difficulty     DemonDifficulty
  attempts       Int?
  videoUrl       String
  thumbnailUrl   String?
  createdAt      DateTime        @default(now())

  // Fields for the progress tracking feature
  status         RecordStatus    @default(COMPLETED)
  percent        Int?            

  user           User            @relation(fields: [userId], references: [id])
  userId         String          @db.ObjectId
}

// Model for the friends system
model Friendship {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  status      FriendStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  requester   User         @relation("Requester", fields: [requesterId], references: [id])
  requesterId String       @db.ObjectId

  receiver    User         @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String       @db.ObjectId

  @@unique([requesterId, receiverId])
}